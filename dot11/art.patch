From d82be88ef64fbaa762b3d3e0354d9c91dd8dc77f Mon Sep 17 00:00:00 2001
From: Baligh Uddin <baligh@google.com>
Date: Fri, 20 Nov 2020 16:07:47 +0000
Subject: [PATCH 1/2] Use the non-debug apex for userdebug builds

Userdebug device builds are providing a debug ART module
(com.android.art.debug), which prevents the override_apex()
soong function to properly override com.android.art module,
leading to multiple art modules on a device image.

BUG: 173331738
BUG: 173662703
Test: TH
Merged-In: I0cdc4b43bd56156ba5f0bcbafec77701dede2bb0
Change-Id: Ic9b3d470b86500b5acb70540c0ac2bdb83e775dc
Signed-off-by: Albert I <kras@raphielgang.org>
---
 Android.mk | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Android.mk b/Android.mk
index d4de2e5a18..c31d598fd4 100644
--- a/Android.mk
+++ b/Android.mk
@@ -293,7 +293,7 @@ include $(CLEAR_VARS)
 #
 # The ART APEX module (`com.android.art`) is an "alias" for either the
 # release or the debug module. By default, "user" build variants contain
-# the release module, while "userdebug" and "eng" build variants contain
+# the release module, while "eng" build variants contain
 # the debug module. However, if `PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD`
 # is defined, it overrides the previous logic:
 # - if `PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD` is set to `false`, the
@@ -304,7 +304,7 @@ include $(CLEAR_VARS)
 
 art_target_include_debug_build := $(PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD)
 ifneq (false,$(art_target_include_debug_build))
-  ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
+  ifneq (,$(filter eng,$(TARGET_BUILD_VARIANT)))
     art_target_include_debug_build := true
   endif
 endif
-- 
2.31.1


From f79e6b6ad9d147d06cc62117d8aeadbb0b604f9e Mon Sep 17 00:00:00 2001
From: Artem Serov <artem.serov@linaro.org>
Date: Wed, 24 Jun 2020 19:25:10 +0100
Subject: [PATCH 2/2] ARM64: Enable SDOT/UDOT instructions emission.

Enables SDOT/UDOT instructions emission for those arm64
targets which support DOTPROD feature. Currently only
vector VecDotProd instruction could emit those.

Test: test-art-target.
Test: test-art-target --instruction-set-features runtime.
Test: 684-checker-simd-dotprod.

Change-Id: I57a16e340a42879ff19a3b2439ea11525dbeaccc
Signed-off-by: Jake Weinstein <jake@aospa.co>
Signed-off-by: Albert I <kras@raphielgang.org>
---
 .../optimizing/code_generator_vector_arm64.cc |  6 +--
 .../src/other/TestByte.java                   | 37 ++++++++++++++-----
 2 files changed, 29 insertions(+), 14 deletions(-)

diff --git a/compiler/optimizing/code_generator_vector_arm64.cc b/compiler/optimizing/code_generator_vector_arm64.cc
index df95c88c07..ad5e9ab68b 100644
--- a/compiler/optimizing/code_generator_vector_arm64.cc
+++ b/compiler/optimizing/code_generator_vector_arm64.cc
@@ -38,13 +38,9 @@ using helpers::XRegisterFrom;
 
 #define __ GetVIXLAssembler()->
 
-// Build-time switch for Armv8.4-a dot product instructions.
-// TODO: Enable dot product when there is a device to test it on.
-static constexpr bool kArm64EmitDotProdInstructions = false;
-
 // Returns whether dot product instructions should be emitted.
 static bool ShouldEmitDotProductInstructions(const CodeGeneratorARM64* codegen_) {
-  return kArm64EmitDotProdInstructions && codegen_->GetInstructionSetFeatures().HasDotProd();
+  return codegen_->GetInstructionSetFeatures().HasDotProd();
 }
 
 void LocationsBuilderARM64::VisitVecReplicateScalar(HVecReplicateScalar* instruction) {
diff --git a/test/684-checker-simd-dotprod/src/other/TestByte.java b/test/684-checker-simd-dotprod/src/other/TestByte.java
index 9acfc59cc7..608d0215ce 100644
--- a/test/684-checker-simd-dotprod/src/other/TestByte.java
+++ b/test/684-checker-simd-dotprod/src/other/TestByte.java
@@ -34,7 +34,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdSimple(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdSimple(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -48,6 +48,16 @@ public class TestByte {
   //
   /// CHECK-DAG: <<Reduce:d\d+>>  VecReduce [<<Phi2>>]                                  loop:none
   /// CHECK-DAG:                  VecExtractScalar [<<Reduce>>]                         loop:none
+
+
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdSimple(byte[], byte[]) disassembly (after)
+  /// CHECK:        VecDotProd
+  /// CHECK-IF:     hasIsaFeature("dotprod")
+  ///               CHECK-NEXT:   sdot v{{\d+}}.4s, v{{\d+}}.16b, v{{\d+}}.16b
+  /// CHECK-ELSE:
+  ///               CHECK-NOT:    sdot
+  ///               CHECK-NOT:    udot
+  /// CHECK-FI:
   public static final int testDotProdSimple(byte[] a, byte[] b) {
     int s = 1;
     for (int i = 0; i < b.length; i++) {
@@ -72,7 +82,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdComplex(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdComplex(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -109,7 +119,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdSimpleUnsigned(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdSimpleUnsigned(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -123,6 +133,15 @@ public class TestByte {
   //
   /// CHECK-DAG: <<Reduce:d\d+>>  VecReduce [<<Phi2>>]                                  loop:none
   /// CHECK-DAG:                  VecExtractScalar [<<Reduce>>]                         loop:none
+
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdSimpleUnsigned(byte[], byte[]) disassembly (after)
+  /// CHECK:        VecDotProd
+  /// CHECK-IF:     hasIsaFeature("dotprod")
+  ///               CHECK-NEXT:   udot v{{\d+}}.4s, v{{\d+}}.16b, v{{\d+}}.16b
+  /// CHECK-ELSE:
+  ///               CHECK-NOT:    sdot
+  ///               CHECK-NOT:    udot
+  /// CHECK-FI:
   public static final int testDotProdSimpleUnsigned(byte[] a, byte[] b) {
     int s = 1;
     for (int i = 0; i < b.length; i++) {
@@ -147,7 +166,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdComplexUnsigned(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdComplexUnsigned(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -188,7 +207,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdComplexUnsignedCastedToSigned(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdComplexUnsignedCastedToSigned(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -229,7 +248,7 @@ public class TestByte {
   /// CHECK-DAG:                  Add [<<Phi2>>,<<Mul>>]                                loop:<<Loop>>      outer_loop:none
   /// CHECK-DAG:                  Add [<<Phi1>>,<<Const1>>]                             loop:<<Loop>>      outer_loop:none
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdComplexSignedCastedToUnsigned(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdComplexSignedCastedToUnsigned(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG: <<Const0:i\d+>>  IntConstant 0                                         loop:none
   /// CHECK-DAG: <<Const1:i\d+>>  IntConstant 1                                         loop:none
   /// CHECK-DAG: <<Const16:i\d+>> IntConstant 16                                        loop:none
@@ -255,7 +274,7 @@ public class TestByte {
     return s - 1;
   }
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdSignedWidening(byte[], byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdSignedWidening(byte[], byte[]) loop_optimization (after)
   /// CHECK-DAG:                  VecDotProd type:Int8
   public static final int testDotProdSignedWidening(byte[] a, byte[] b) {
     int s = 1;
@@ -266,7 +285,7 @@ public class TestByte {
     return s - 1;
   }
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdParamSigned(int, byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdParamSigned(int, byte[]) loop_optimization (after)
   /// CHECK-DAG:                  VecDotProd type:Int8
   public static final int testDotProdParamSigned(int x, byte[] b) {
     int s = 1;
@@ -277,7 +296,7 @@ public class TestByte {
     return s - 1;
   }
 
-  /// CHECK-START-{ARM64}: int other.TestByte.testDotProdParamUnsigned(int, byte[]) loop_optimization (after)
+  /// CHECK-START-ARM64: int other.TestByte.testDotProdParamUnsigned(int, byte[]) loop_optimization (after)
   /// CHECK-DAG:                  VecDotProd type:Uint8
   public static final int testDotProdParamUnsigned(int x, byte[] b) {
     int s = 1;
-- 
2.31.1

